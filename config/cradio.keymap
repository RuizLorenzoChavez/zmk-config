// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

// Default mouse scroll and movement speeds
#define ZMK_POINTING_DEFAULT_MOVE_VAL 900  
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20  

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>

// Mouse config
&mmv {
    time-to-max-speed-ms = <300>;
    acceleration-exponent = <0>;
};

&msc {
    time-to-max-speed-ms = <300>;
  acceleration-exponent = <0>;
};

// Home row mods macro
#define ABC 0
#define NUM 1
#define SYM 2
#define NAV 3
#define FUN 4
#define BLU 5
#define MAC 6
#define MAV 7

/ {
    combos {
        compatible = "zmk,combos";
        lesc {
            timeout-ms = <270>;
            slow-release;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
            layers = <ABC NUM SYM MAC NAV MAV>;
        };

        resc {
            timeout-ms = <270>;
            slow-release;
            key-positions = <7 8>;
            bindings = <&kp ESC>;
            layers = <ABC NUM SYM MAC NAV MAV>;
        };

        spac {
            timeout-ms = <270>;
            slow-release;
            key-positions = <30 31>;
            bindings = <&kp SPACE>;
            layers = <ABC NUM SYM MAC>;
        };

        bacc {
            timeout-ms = <270>;
            slow-release;
            key-positions = <32 33>;
            bindings = <&kp BSPC>;
            layers = <ABC NUM SYM MAC>;
        };

        capc {
            timeout-ms = <270>;
            slow-release;
            key-positions = <13 16>;
            bindings = <&caps_word>;
            layers = <ABC NUM SYM MAC>;
        };

        macc {
            timeout-ms = <270>;
            slow-release;
            key-positions = <30 33>;
            bindings = <&tog MAC>;
        };
    };

    macros {
        back_wrd: backword_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp BSPC>, <&macro_release &kp LCTRL>;
        };

        front_wrd: frontword_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp DEL>, <&macro_release &kp LCTRL>;
        };

        back_ln: backline_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>, <&macro_tap &kp HOME>, <&macro_release &kp LSHFT>, <&macro_tap &kp BSPC>;
        };

        front_ln: frontline_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>, <&macro_tap &kp END>, <&macro_release &kp LSHFT>, <&macro_tap &kp BSPC>;
        };

    };

    behaviors {
        // HOME ROW BEHAVIORS
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <70>;
            tapping-term-ms = <160>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = < 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33 >; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <70>;
            tapping-term-ms = <160>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = < 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 >; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };

        // ABC TAP DANCE
        uno: sqt_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp DOT>, <&kp SQT>;
        };
        duo: dqt_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp COMMA>, <&kp DQT>;
        };


        // ABC MORPH MOD
        marks: marks_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp EXCL>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        // NUM TAP DANCE
        close_b: close_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LPAR>, <&kp LBKT>, <&kp LBRC>;
        };
        open_b: open_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RPAR>, <&kp RBKT>, <&kp RBRC>;
        };

        // NAV TAP DANCE
        sup_lf: left_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LEFT>, <&kp LC(LEFT)>, <&kp LS(LC(LEFT))>; 
        };

        sup_rt: right_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp RIGHT>, <&kp LC(RIGHT)>, <&kp LS(LC(RIGHT))>; 
        };

       sup_up: up_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp UP>, <&kp LS(HOME)>, <&kp LS(PG_UP)>; 
        };

        sup_dn: down_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp DOWN>, <&kp LS(END)>, <&kp LS(PG_DN)>; 
        };

        // THUMB CLUSTER TAP DANCE
        bkd: backspace_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <270>;
            bindings = <&kp BSPC>, <&back_wrd>, <&back_ln>;
        };

        ftd: frontspace_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <270>;
            bindings = <&kp TAB>, <&front_wrd>, <&front_ln>;
        };

        mbkd: mac_backspace_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <270>;
            bindings = <&kp BSPC>, <&kp LA(BSPC)>, <&kp LG(BSPC)>;
        };

        // THUMB CLUSTERS LAYER TAP
        ftap: fun_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            bindings = <&mo>, <&ftd>;
            display-name = "Layer-Tap";
        };

        ntap: nav_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            bindings = <&mo>, <&bkd>;
            display-name = "Layer-Tap";
        };

        mtap: mav_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            bindings = <&mo>, <&mbkd>;
            display-name = "Layer-Tap";
        };

        ltc: layer_tap_custom {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <170>;
            bindings = <&mo>, <&kp>;
        };

    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        blu_layer {
            if-layers = <NUM SYM>;
            then-layer = <BLU>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        ABC_layer {
            display-name = "_ABC";
            bindings = <
            &kp Q           &kp W           &kp F               &kp P               &kp G                   &kp J           &kp L           &kp U           &kp Y           &kp SEMI
            &hml LGUI A     &hml LALT R     &hml LCTRL S        &hml LSHFT T        &kp D                   &kp H           &hmr RSHFT N    &hmr RCTRL E    &hmr RALT I     &hmr RGUI O
            &kp Z           &kp X           &kp C               &kp V               &kp B                   &kp K           &kp M           &duo            &uno            &marks
                                                                &ftap FUN 0         &ltc NUM SPACE          &ltc SYM ENTER  &ntap NAV 0
            >;
        };

        NUM_layer {
            display-name = "_NUM";
            bindings = <
            &kp N0          &kp N9          &kp N8              &kp N7              &kp N6                  &trans          &trans          &trans          &trans          &trans
            &kp N1          &kp N2          &kp N3              &kp N4              &kp N5                  &trans          &trans          &trans          &trans          &trans
            &kp PLUS        &kp MINUS       &kp STAR            &kp FSLH            &kp EQUAL               &trans          &trans          &trans          &trans          &trans
                                                                &none               &trans                  &trans          &none
            >;
        };
        
        SYM_layer {
            display-name = "_SYM";
            bindings = <
            &trans          &trans          &trans              &trans              &trans                  &kp HASH        &kp MINUS       &kp EQUAL       &kp PRCNT       &kp STAR
            &trans          &trans          &trans              &trans              &trans                  &kp DLLR        &close_b        &open_b         &kp AMPS        &kp AT
            &trans          &trans          &trans              &trans              &trans                  &kp GRAVE       &kp LT          &kp GT          &kp CARET       &kp BSLH
                                                                &none               &trans                  &trans          &none
            >;
        };

        NAV_layer {
            display-name = "_NAV";
            bindings = <
            &mkp MB2        &mkp MB4        &mmv MOVE_UP        &mkp MB5            &none                   &kp LC(X)       &kp HOME        &sup_up         &kp END         &kp LC(A)
            &mkp MB1        &mmv MOVE_LEFT  &mmv MOVE_DOWN      &mmv MOVE_RIGHT     &mkp MB3                &kp LC(C)       &sup_lf         &sup_dn         &sup_rt         &kp LSHFT
            &msc SCRL_LEFT  &msc SCRL_RIGHT &msc SCRL_DOWN      &msc SCRL_UP        &none                   &kp PSCRN       &kp PG_UP       &kp DEL         &kp PG_DN       &kp LC(V)
                                                                &none               &kp LCTRL               &none           &trans
            >;
        };

        FUN_layer {
            display-name = "_FUN";
            bindings = <
            &kp F10         &kp F9          &kp F8              &kp F7              &kp F6                  &none           &kp C_BRI_UP    &kp C_BRI_DN    &kp C_BRI_MIN   &none
            &kp F1          &kp F2          &kp F3              &kp F4              &kp F5                  &none           &kp C_VOL_UP    &kp C_VOL_DN    &kp C_MUTE      &none
            &kp F15         &kp F14         &kp F13             &kp F12             &kp F11                 &none           &kp C_PREV      &kp C_NEXT      &kp C_PP        &none
                                                                &trans              &none                   &none           &none
            >;
        };

        BLU_layer {
            display-name = "_BLU";
            bindings = <
            &none           &none           &bt BT_CLR_ALL      &bt BT_CLR          &none                   &bt BT_DISC 4   &bt BT_DISC 3   &bt BT_DISC 2   &bt BT_DISC 1   &bt BT_DISC 0
            &none           &none           &bt BT_PRV          &bt BT_NXT          &none                   &bt BT_SEL 4    &bt BT_SEL 3    &bt BT_SEL 2    &bt BT_SEL 1    &bt BT_SEL 0
            &none           &none           &none               &none               &none                   &none           &none           &none           &none           &none
                                                                &none               &none                   &none           &none
            >;
        };

        MAC_layer {
            display-name = "_MAC";
            bindings = <
            &kp Q           &kp W           &kp F               &kp P               &kp G                   &kp J           &kp L           &kp U           &kp Y           &kp SEMI
            &hml LALT A     &hml LCTRL R     &hml LGUI S        &hml LSHFT T        &hmc 0 D                &hmc 0 H        &hmr RSHFT N    &hmr RGUI E     &hmr RCTRL I    &hmr RALT O
            &kp Z           &kp X           &kp C               &kp V               &kp B                   &kp K           &kp M           &duo            &uno            &marks
                                                                &ltc FUN TAB        &ltc NUM SPACE          &ltc SYM ENTER  &mtap MAV 0
            >;
        };

        MAV_layer {
            display-name = "_MAV";
            bindings = <
            &mkp MB2        &mkp MB4        &mmv MOVE_UP        &mkp MB5            &none                   &kp LG(X)       &kp LG(LEFT)    &sup_up         &kp LG(RIGHT)   &kp LG(A)
            &mkp MB1        &mmv MOVE_LEFT  &mmv MOVE_DOWN      &mmv MOVE_RIGHT     &mkp MB3                &kp LG(C)       &sup_lf         &sup_dn         &sup_rt         &kp LSHFT
            &msc SCRL_LEFT  &msc SCRL_RIGHT &msc SCRL_DOWN      &msc SCRL_UP        &none                   &kp PSCRN       &kp LG(UP)      &kp DEL         &kp LG(DOWN)    &kp LG(V)
                                                                &none               &kp LGUI                &none           &trans
            >;
        };
    };
};